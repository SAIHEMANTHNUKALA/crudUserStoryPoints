version: 0.2

env:
  variables:
    IMAGE_TAG: "latest"  # This is safe to hardcode

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo "Installing Maven..."
      - mvn --version

  pre_build:
    commands:
      - echo "Building Spring Boot JAR..."
      - mvn clean package -DskipTests
      - echo "Logging in to Docker Hub securely..."
      - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - echo "Logging in to Amazon ECR..."
      - REPOSITORY_URI=$ECR_REPOSITORY_URI
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      - echo "Image tag: $IMAGE_TAG"

  build:
    commands:
      - echo "Building Docker image from repo $DOCKERHUB_REPO..."
      - docker build -t $DOCKERHUB_REPO:$IMAGE_TAG .
      - docker tag $DOCKERHUB_REPO:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
      - docker tag $DOCKERHUB_REPO:$IMAGE_TAG $REPOSITORY_URI:latest

  post_build:
    commands:
      - echo "Pushing Docker image to Docker Hub..."
      - docker push $DOCKERHUB_REPO:$IMAGE_TAG
      - echo "Pushing Docker image to Amazon ECR..."
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - echo "Generating imagedefinitions.json with container name: $DOCKER_CONTAINER_NAME"
      - printf '[{"name":"%s","imageUri":"%s"}]' "$DOCKER_CONTAINER_NAME" "$REPOSITORY_URI:$IMAGE_TAG" > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json




#version: 0.2
#
#env:
#  variables:
#    IMAGE_TAG: "latest"
#    DOCKER_CONTAINER_NAME: "userstory-service"
#
#phases:
#  install:
#    runtime-versions:
#      java: corretto17
#    commands:
#      - echo "Installing Maven dependencies..."
#  pre_build:
#    commands:
#      - echo "Building Spring Boot JAR..."
#      - mvn clean package -DskipTests
#      - echo "Logging in to Amazon ECR..."
#      - REPOSITORY_URI=$ECR_REPOSITORY_URI
#      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
#      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
#      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
#  build:
#    commands:
#      - echo "Building Docker image..."
#      - docker build -t $REPOSITORY_URI:latest .
#      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
#  post_build:
#    commands:
#      - echo "Pushing Docker images to ECR..."
#      - docker push $REPOSITORY_URI:latest
#      - docker push $REPOSITORY_URI:$IMAGE_TAG
#      - echo "Generating imagedefinitions.json..."
#      - printf '[{"name":"%s","imageUri":"%s"}]' "$DOCKER_CONTAINER_NAME" "$REPOSITORY_URI:$IMAGE_TAG" > imagedefinitions.json
#      - cat imagedefinitions.json
#
#artifacts:
#  files:
#    - imagedefinitions.json




#version: 0.2 previous version
#
#phases:
#  pre_build:
#    commands:
#      - mvn clean install
#      - echo Logging in to Amazon ECR...
#      - aws --version
#      - REPOSITORY_URI=$ECR_REPOSITORY_URI
#      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
#      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
#      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
#  build:
#    commands:
#      - echo Build started on `date`
#      - echo Building the Docker image...
#      - docker build -t $REPOSITORY_URI:latest .
#      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
#  post_build:
#    commands:
#      - echo Build completed on `date`
#      - echo Pushing the Docker images...
#      - docker push $REPOSITORY_URI:latest
#      - docker push $REPOSITORY_URI:$IMAGE_TAG
#      - echo Writing image definitions file...
#      - printf '[{"name":"course-service","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
#      - echo Writing image definitions file...
#      # add your container name
#      - DOCKER_CONTAINER_NAME=$DOCKER_CON_NAME
#      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
#      - echo $DOCKER_CONTAINER_NAME
#      - echo printing imagedefinitions.json
#      - cat imagedefinitions.json
#
#artifacts:
#  files:
#    - imagedefinitions.json
#    - target/crud.jar
